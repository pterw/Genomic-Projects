{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "050562fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['CAT', 'TGT', 'CTA', 'TTA', 'CTA']\n",
      "[0, 0, 2]\n",
      "[0, 0, 2]\n",
      "[2, 0, 4]\n",
      "[2, 0, 2]\n",
      "[2, 0, 4]\n",
      "L0 = 2\n",
      "L2 = 0\n",
      "L4 = 1\n",
      "Synonymous substitution rate: 0.125\n",
      "Nonsynonymous substitution rate: 0.14285714285714285\n"
     ]
    }
   ],
   "source": [
    "seq = 'CATTGTCTATTACTA'\n",
    "n = 3\n",
    "codons = [seq[i:i+n] for i in range(0, len(seq), n)]\n",
    "print(codons)\n",
    "\n",
    "thisdict = {\n",
    "    \"Arg\": ['CGT', 'CGC','CGA','CGG'],\n",
    "    \"Phe\": ['TTT','TTC'],\n",
    "    \"Leu\": ['TTA','TTG','CTT','CTC','CTA','CTG'],\n",
    "    \"Ile\": ['ATT','ATC'],\n",
    "    \"Met\": ['ATA','ATG'],\n",
    "    \"Val\": ['GTT','GTC','GTA','GTG'],\n",
    "    \"Ser\": ['TCT','TCC','TCA','TCG','AGT','AGC'],\n",
    "    \"Pro\": ['CCT,','CCC','CCA','CCG'],\n",
    "    \"Ala\": ['GCT','GCC','GCA','GCG'],\n",
    "    \"Thr\": ['ACT','ACC','ACA','ACG'],\n",
    "    \"Tyr\": ['TAT','TAC'],\n",
    "    \"His\": ['CAT','CAC'],\n",
    "    \"Gln\": ['CAA','CAG'],\n",
    "    \"Asn\": ['AAT','AAC'],\n",
    "    \"Lys\": ['AAA','AAG'],\n",
    "    'Asp': ['GAT','GAC'],\n",
    "    \"Glu\": ['GAA','GAG'],\n",
    "    \"Cys\": ['TGT','TGC'],\n",
    "    \"Trp\": ['TGA','TGG'],\n",
    "    \"Gly\": ['GGT','GGC','GGA','GGG'],\n",
    "    \"end(*)\":['TAA','TAG','AGA','AGG'],\n",
    "}\n",
    "\n",
    "def degenerated_sites(codon):\n",
    "    a_codon = list((codon))\n",
    "    b_codon = list((codon))\n",
    "    c_codon = list((codon))\n",
    "    nucleotides = ['A','C','T','G']\n",
    "    codons1=[]\n",
    "    codons2=[]\n",
    "    codons3=[]\n",
    "    \n",
    "    for i in range(len(nucleotides)):\n",
    "        a_codon[0] = nucleotides[i]\n",
    "        first_site = \"\".join(a_codon)\n",
    "        codons1.append(first_site)\n",
    "    for i in range(len(nucleotides)):\n",
    "        b_codon[1] = nucleotides[i]\n",
    "        second_site = \"\".join(b_codon)\n",
    "        codons2.append(second_site)\n",
    "    for i in range(len(nucleotides)):\n",
    "        c_codon[2] = nucleotides[i]\n",
    "        third_site = \"\".join(c_codon)\n",
    "        codons3.append(third_site)\n",
    "    codons1.remove(codon)\n",
    "    codons2.remove(codon)\n",
    "    codons3.remove(codon)\n",
    "\n",
    "    aa=[]\n",
    "    aa2=[]\n",
    "    aa3=[]\n",
    "    codonAA=[]\n",
    "    num=[0,0,0]\n",
    "    \n",
    "    for key, value in thisdict.items():\n",
    "        if codon in value:\n",
    "            codonAA.append(key)\n",
    "\n",
    "    for key, value in thisdict.items():\n",
    "        for i in range(len(codons1)): \n",
    "            if codons1[i] in value: \n",
    "                aa.append(key)\n",
    "\n",
    "    if (codonAA*3) == aa:\n",
    "        num[0]=4\n",
    "    elif (codonAA[0]) in aa:\n",
    "        num[0]=2\n",
    "    elif (codonAA[0]) not in aa:\n",
    "        num[0]=0\n",
    "\n",
    "    for key, value in thisdict.items():\n",
    "        for i in range(len(codons2)):\n",
    "            if codons2[i] in value: \n",
    "                aa2.append(key)\n",
    "\n",
    "    if (codonAA)*3 == aa2:\n",
    "        num[1]=4\n",
    "    elif (codonAA[0]) in aa2:\n",
    "        num[1]=2\n",
    "    elif (codonAA) not in aa2:\n",
    "        num[1]=0\n",
    "\n",
    "    for key, value in thisdict.items():\n",
    "        for i in range(len(codons3)):\n",
    "            if codons3[i] in value: \n",
    "                aa3.append(key)\n",
    "  \n",
    "    if len(aa3) == 2:\n",
    "        if (codonAA*2) == aa3:\n",
    "            num[2]=4\n",
    "    elif (codonAA)*3 == aa3:\n",
    "        num[2]=4\n",
    "    elif (codonAA[0]) in aa3:\n",
    "        num[2]=2\n",
    "    elif (codonAA) not in aa3:\n",
    "        num[2]=0\n",
    "\n",
    "    return num\n",
    "\n",
    "for i in range(len(codons)):\n",
    "    print(degenerated_sites(codons[i]))\n",
    "\n",
    "number = degenerated_sites('CCA')\n",
    "L0 = 0\n",
    "L2 = 0\n",
    "L4 = 0\n",
    "\n",
    "for i in range(len(number)):\n",
    "    if number[0] == 0:\n",
    "        L0 += 1\n",
    "    if number[1] == 0:\n",
    "        L0 += 1\n",
    "    if number[2] == 0:\n",
    "        L0 += 1\n",
    "    break\n",
    "for i in range(len(number)):\n",
    "    if number[0] == 2:\n",
    "        L2 += 1\n",
    "    if number[1] == 2:\n",
    "        L2 += 1\n",
    "    if number[2] == 2:\n",
    "        L2 += 1\n",
    "    break\n",
    "for i in range(len(number)):\n",
    "    if number[0] == 4:\n",
    "        L4 += 1\n",
    "    if number[1] == 4:\n",
    "        L4 += 1\n",
    "    if number[2] == 4:\n",
    "        L4 += 1\n",
    "    break\n",
    "\n",
    "print('L0 =', L0)\n",
    "print('L2 =', L2)\n",
    "print('L4 =', L4)\n",
    "\n",
    "# New code for comparing sequences and calculating substitution rates\n",
    "def compare_sequences(seq1, seq2):\n",
    "    assert len(seq1) == len(seq2), \"Sequences must be of the same length\"\n",
    "    codons1 = [seq1[i:i+n] for i in range(0, len(seq1), n)]\n",
    "    codons2 = [seq2[i:i+n] for i in range(0, len(seq2), n)]\n",
    "    \n",
    "    synonymous_subs = 0\n",
    "    nonsynonymous_subs = 0\n",
    "    \n",
    "    for c1, c2 in zip(codons1, codons2):\n",
    "        if c1 != c2:\n",
    "            amino_acid1 = None\n",
    "            amino_acid2 = None\n",
    "            for key, value in thisdict.items():\n",
    "                if c1 in value:\n",
    "                    amino_acid1 = key\n",
    "                if c2 in value:\n",
    "                    amino_acid2 = key\n",
    "            if amino_acid1 == amino_acid2:\n",
    "                synonymous_subs += 1\n",
    "            else:\n",
    "                nonsynonymous_subs += 1\n",
    "                \n",
    "    return synonymous_subs, nonsynonymous_subs\n",
    "\n",
    "def calculate_rates(seq1, seq2):\n",
    "    L0, L2, L4 = 0, 0, 0\n",
    "    codons = [seq1[i:i+n] for i in range(0, len(seq1), n)]\n",
    "    \n",
    "    for codon in codons:\n",
    "        num = degenerated_sites(codon)\n",
    "        L0 += num.count(0)\n",
    "        L2 += num.count(2)\n",
    "        L4 += num.count(4)\n",
    "    \n",
    "    syn_subs, nonsyn_subs = compare_sequences(seq1, seq2)\n",
    "    \n",
    "    S = syn_subs / (L2 + L4)\n",
    "    N = nonsyn_subs / L0\n",
    "    \n",
    "    return S, N\n",
    "\n",
    "# Example usage\n",
    "seq1 = 'CATTGTCTATTACTA'\n",
    "seq2 = 'CATTGTCGATTACTG'\n",
    "\n",
    "S, N = calculate_rates(seq1, seq2)\n",
    "print(f'Synonymous substitution rate: {S}')\n",
    "print(f'Nonsynonymous substitution rate: {N}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "714c372a-9335-472b-844e-9bc7b10e58d1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
